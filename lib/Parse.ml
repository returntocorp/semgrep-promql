(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

let debug = ref false

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_promql"

let ts_parser = create_parser ()

let parse_source_string ?src_file contents =
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "float_literal", None;
  "pat_dcab316", None;
  "semgrep_metavariable", None;
  "double_quoted_string", None;
  "single_quoted_string", None;
  "identifier", None;
  "aggregation_operator",
  Some (
    Alt [|
      Token (Literal "sum");
      Token (Literal "max");
      Token (Literal "min");
      Token (Literal "avg");
      Token (Literal "group");
      Token (Literal "stddev");
      Token (Literal "stdvar");
      Token (Literal "count");
      Token (Literal "count_values");
      Token (Literal "bottomk");
      Token (Literal "topk");
      Token (Literal "quantile");
    |];
  );
  "pat_780550e", None;
  "at",
  Some (
    Seq [
      Token (Literal "@");
      Alt [|
        Token (Literal "start()");
        Token (Literal "end()");
        Token (Name "pat_dcab316");
      |];
    ];
  );
  "quoted_string",
  Some (
    Alt [|
      Token (Name "single_quoted_string");
      Token (Name "double_quoted_string");
    |];
  );
  "function_name",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "identifier");
    |];
  );
  "label_name",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "identifier");
    |];
  );
  "metric_name",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "identifier");
    |];
  );
  "duration",
  Some (
    Repeat1 (
      Seq [
        Token (Name "pat_780550e");
        Alt [|
          Token (Literal "ms");
          Token (Literal "s");
          Token (Literal "m");
          Token (Literal "h");
          Token (Literal "d");
          Token (Literal "w");
          Token (Literal "y");
        |];
      ];
    );
  );
  "label_value",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "quoted_string");
    |];
  );
  "string_literal", Some (Token (Name "quoted_string"););
  "binary_grouping",
  Some (
    Seq [
      Alt [|
        Token (Literal "on");
        Token (Literal "ignoring");
      |];
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "label_name");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "label_name");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
      Opt (
        Seq [
          Alt [|
            Token (Literal "group_left");
            Token (Literal "group_right");
          |];
          Opt (
            Seq [
              Token (Literal "(");
              Opt (
                Seq [
                  Token (Name "label_name");
                  Repeat (
                    Seq [
                      Token (Literal ",");
                      Token (Name "label_name");
                    ];
                  );
                  Opt (
                    Token (Literal ",");
                  );
                ];
              );
              Token (Literal ")");
            ];
          );
        ];
      );
    ];
  );
  "aggregation_grouping",
  Some (
    Seq [
      Alt [|
        Token (Literal "by");
        Token (Literal "without");
      |];
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "label_name");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "label_name");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "subquery_range_selection",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "duration");
      Token (Literal ":");
      Opt (
        Token (Name "duration");
      );
      Token (Literal "]");
    ];
  );
  "range_selection",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "duration");
      Token (Literal "]");
    ];
  );
  "offset",
  Some (
    Seq [
      Token (Literal "offset");
      Opt (
        Token (Literal "-");
      );
      Token (Name "duration");
    ];
  );
  "label_matcher",
  Some (
    Seq [
      Token (Name "label_name");
      Alt [|
        Token (Literal "=");
        Token (Literal "!=");
        Token (Literal "=~");
        Token (Literal "!~");
      |];
      Token (Name "label_value");
    ];
  );
  "literal_expression",
  Some (
    Alt [|
      Token (Name "float_literal");
      Token (Name "string_literal");
    |];
  );
  "modifier",
  Some (
    Alt [|
      Seq [
        Token (Name "offset");
        Opt (
          Token (Name "at");
        );
      ];
      Seq [
        Token (Name "at");
        Opt (
          Token (Name "offset");
        );
      ];
    |];
  );
  "label_selectors",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "label_matcher");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "label_matcher");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "series_matcher",
  Some (
    Seq [
      Token (Name "metric_name");
      Opt (
        Token (Name "label_selectors");
      );
    ];
  );
  "range_vector_selector",
  Some (
    Seq [
      Token (Name "series_matcher");
      Token (Name "range_selection");
      Opt (
        Token (Name "modifier");
      );
    ];
  );
  "instant_vector_selector",
  Some (
    Seq [
      Token (Name "series_matcher");
      Opt (
        Token (Name "modifier");
      );
    ];
  );
  "timeseries_selector_expression",
  Some (
    Alt [|
      Token (Name "instant_vector_selector");
      Token (Name "range_vector_selector");
    |];
  );
  "aggregation_expression",
  Some (
    Seq [
      Token (Name "aggregation_operator");
      Opt (
        Token (Name "aggregation_grouping");
      );
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "literal_expression");
          Token (Literal ",");
        ];
      );
      Token (Name "query");
      Token (Literal ")");
      Opt (
        Token (Name "aggregation_grouping");
      );
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "query");
        Alt [|
          Token (Literal "^");
        |];
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
      Seq [
        Token (Name "query");
        Alt [|
          Token (Literal "*");
          Token (Literal "/");
          Token (Literal "%");
        |];
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
      Seq [
        Token (Name "query");
        Alt [|
          Token (Literal "+");
          Token (Literal "-");
        |];
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
      Seq [
        Token (Name "query");
        Alt [|
          Token (Literal "==");
          Token (Literal "!=");
          Token (Literal ">");
          Token (Literal ">=");
          Token (Literal "<");
          Token (Literal "<=");
        |];
        Opt (
          Token (Literal "bool");
        );
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
      Seq [
        Token (Name "query");
        Alt [|
          Token (Literal "and");
          Token (Literal "or");
          Token (Literal "unless");
        |];
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
      Seq [
        Token (Name "query");
        Alt [|
          Token (Literal "atan2");
        |];
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
    |];
  );
  "function_args",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "query");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "query");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "function_call",
  Some (
    Seq [
      Token (Name "function_name");
      Token (Name "function_args");
    ];
  );
  "function_expression", Some (Token (Name "function_call"););
  "operator_expression",
  Some (
    Alt [|
      Token (Name "aggregation_expression");
      Token (Name "binary_expression");
    |];
  );
  "query",
  Some (
    Alt [|
      Token (Name "query_expression");
      Seq [
        Token (Literal "(");
        Token (Name "query_expression");
        Token (Literal ")");
      ];
    |];
  );
  "query_expression",
  Some (
    Alt [|
      Token (Name "literal_expression");
      Token (Name "timeseries_selector_expression");
      Token (Name "function_expression");
      Token (Name "operator_expression");
      Token (Name "subquery_expression");
    |];
  );
  "subquery",
  Some (
    Seq [
      Token (Name "query");
      Token (Name "subquery_range_selection");
      Opt (
        Token (Name "modifier");
      );
    ];
  );
  "subquery_expression", Some (Token (Name "subquery"););
  "query_", Some (Token (Name "query"););
]

let trans_float_literal ((kind, body) : mt) : CST.float_literal =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_dcab316 ((kind, body) : mt) : CST.pat_dcab316 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_metavariable ((kind, body) : mt) : CST.semgrep_metavariable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_double_quoted_string ((kind, body) : mt) : CST.double_quoted_string =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_single_quoted_string ((kind, body) : mt) : CST.single_quoted_string =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_aggregation_operator ((kind, body) : mt) : CST.aggregation_operator =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Sum (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Max (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Min (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Avg (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Group (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Stddev (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Stdvar (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Count (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Count_values (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Bott (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Topk (
            Run.trans_token (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Quan (
            Run.trans_token (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_pat_780550e ((kind, body) : mt) : CST.pat_780550e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_at ((kind, body) : mt) : CST.at =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Star (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `EndL (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Pat_dcab316 (
                  trans_pat_dcab316 (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_string ((kind, body) : mt) : CST.quoted_string =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Single_quoted_str (
            trans_single_quoted_string (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Double_quoted_str (
            trans_double_quoted_string (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_function_name ((kind, body) : mt) : CST.function_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_name ((kind, body) : mt) : CST.label_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_metric_name ((kind, body) : mt) : CST.metric_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_duration ((kind, body) : mt) : CST.duration =
  match body with
  | Children v ->
      Run.repeat1
        (fun v ->
          (match v with
          | Seq [v0; v1] ->
              (
                trans_pat_780550e (Run.matcher_token v0),
                (match v1 with
                | Alt (0, v) ->
                    `Ms (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `S (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `M (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `H (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `D (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `W (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `Y (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
          | _ -> assert false
          )
        )
        v
  | Leaf _ -> assert false

let trans_label_value ((kind, body) : mt) : CST.label_value =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Quoted_str (
            trans_quoted_string (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_literal ((kind, body) : mt) : CST.string_literal =
  match body with
  | Children v ->
      trans_quoted_string (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_binary_grouping ((kind, body) : mt) : CST.binary_grouping =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `On (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Igno (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_label_name (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_label_name (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Group_left (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Group_right (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Seq [v0; v1; v2] ->
                                        (
                                          trans_label_name (Run.matcher_token v0),
                                          Run.repeat
                                            (fun v ->
                                              (match v with
                                              | Seq [v0; v1] ->
                                                  (
                                                    Run.trans_token (Run.matcher_token v0),
                                                    trans_label_name (Run.matcher_token v1)
                                                  )
                                              | _ -> assert false
                                              )
                                            )
                                            v1
                                          ,
                                          Run.opt
                                            (fun v -> Run.trans_token (Run.matcher_token v))
                                            v2
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                                ,
                                Run.trans_token (Run.matcher_token v2)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_aggregation_grouping ((kind, body) : mt) : CST.aggregation_grouping =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `By (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `With (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_label_name (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_label_name (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_subquery_range_selection ((kind, body) : mt) : CST.subquery_range_selection =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_duration (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_duration (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_range_selection ((kind, body) : mt) : CST.range_selection =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_duration (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_offset ((kind, body) : mt) : CST.offset =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_duration (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_matcher ((kind, body) : mt) : CST.label_matcher =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_label_name (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `BANGEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `EQTILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `BANGTILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_label_value (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_literal_expression ((kind, body) : mt) : CST.literal_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Float_lit (
            trans_float_literal (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Str_lit (
            trans_string_literal (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_modifier ((kind, body) : mt) : CST.modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Offset_opt_at (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_offset (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_at (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `At_opt_offset (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_at (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_offset (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_selectors ((kind, body) : mt) : CST.label_selectors =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_label_matcher (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_label_matcher (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_series_matcher ((kind, body) : mt) : CST.series_matcher =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_metric_name (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_label_selectors (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_range_vector_selector ((kind, body) : mt) : CST.range_vector_selector =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_series_matcher (Run.matcher_token v0),
            trans_range_selection (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_modifier (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_instant_vector_selector ((kind, body) : mt) : CST.instant_vector_selector =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_series_matcher (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_modifier (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_timeseries_selector_expression ((kind, body) : mt) : CST.timeseries_selector_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Inst_vec_sele (
            trans_instant_vector_selector (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Range_vec_sele (
            trans_range_vector_selector (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_aggregation_expression ((kind, body) : mt) : CST.aggregation_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            trans_aggregation_operator (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_aggregation_grouping (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_literal_expression (Run.matcher_token v0),
                      Run.trans_token (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            trans_query (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5),
            Run.opt
              (fun v -> trans_aggregation_grouping (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Query_choice_HAT_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `HAT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v2
                  ,
                  trans_query (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Query_choice_STAR_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `STAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SLASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `PERC (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v2
                  ,
                  trans_query (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Query_choice_PLUS_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v2
                  ,
                  trans_query (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Query_choice_EQEQ_opt_bool_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3; v4] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `EQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `BANGEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `GT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `GTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `LT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `LTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> Run.trans_token (Run.matcher_token v))
                    v2
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v3
                  ,
                  trans_query (Run.matcher_token v4)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Query_choice_and_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `And (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Or (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Unless (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v2
                  ,
                  trans_query (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Query_choice_atan2_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Atan2 (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v2
                  ,
                  trans_query (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_args ((kind, body) : mt) : CST.function_args =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_query (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_query (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_call ((kind, body) : mt) : CST.function_call =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_function_name (Run.matcher_token v0),
            trans_function_args (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_expression ((kind, body) : mt) : CST.function_expression =
  match body with
  | Children v ->
      trans_function_call (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_operator_expression ((kind, body) : mt) : CST.operator_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Aggr_exp (
            trans_aggregation_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Bin_exp (
            trans_binary_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_query ((kind, body) : mt) : CST.query =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Query_exp (
            trans_query_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `LPAR_query_exp_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_query_expression (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_query_expression ((kind, body) : mt) : CST.query_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Lit_exp (
            trans_literal_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Timess_sele_exp (
            trans_timeseries_selector_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Func_exp (
            trans_function_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Op_exp (
            trans_operator_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Subq_exp (
            trans_subquery_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subquery ((kind, body) : mt) : CST.subquery =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_query (Run.matcher_token v0),
            trans_subquery_range_selection (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_modifier (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subquery_expression ((kind, body) : mt) : CST.subquery_expression =
  match body with
  | Children v ->
      trans_subquery (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_query_ ((kind, body) : mt) : CST.query_ =
  match body with
  | Children v ->
      trans_query (Run.matcher_token v)
  | Leaf _ -> assert false

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let root_node = Run.remove_extras ~extras orig_root_node in
  let matched_tree = Run.match_tree children_regexps src root_node in
  let opt_program = Option.map trans_query_ matched_tree in
  Parsing_result.create src opt_program errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

